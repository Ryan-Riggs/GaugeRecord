import ee 
ee.Initialize()
#from ee_plugin import Map 

sword = ee.FeatureCollection('users/rriggs/AllxSections3')
records = ee.FeatureCollection('users/rriggs/grdc_gee1')
grdc = ee.FeatureCollection('users/rriggs/GSIM_plus_India')
grwl_cline = ee.FeatureCollection('users/eeProject/GRWL_summaryStats')
# def extraFunction(ryan):
#x = require('users/eeProject/RivWidthCloudPaper:functions_Landsat578/functions_waterClassification_Jones2019.js')
# fls = require('users/eeProject/RivWidthCloudPaper:functions_Landsat578/functions_landsat.js')
# flsh = require('users/eeProject/RivWidthCloudPaper:rwc_landsat.js')
# fnsLandsat = require('users/eeProject/RivWidthCloudPaper:functions_Landsat578/functions_landsat.js')
# lsFun = require('users/eeProject/RivWidthCloudPaper:functions_Landsat578/functions_landsat.js')
# riverFun = require('users/eeProject/RivWidthCloudPaper:functions_river.js')
grwl_cline = ee.FeatureCollection('users/eeProject/GRWL_summaryStats')

def maximum_no_of_tasks(MaxNActive, waitingPeriod):
	"""maintain a maximum number of active tasks
	"""
	import time
	import ee
	ee.Initialize()

	time.sleep(10)
	## initialize submitting jobs
	ts = list(ee.batch.Task.list())

	NActive = 0
	for task in ts:
		if ('RUNNING' in str(task) or 'READY' in str(task)):
			NActive += 1
	## wait if the number of current active tasks reach the maximum number
	## defined in MaxNActive
	while (NActive >= MaxNActive):
		time.sleep(waitingPeriod) # if reach or over maximum no. of active tasks, wait for 2min and check again
		ts = list(ee.batch.Task.list())
		NActive = 0
		for task in ts:
			if ('RUNNING' in str(task) or 'READY' in str(task)):
				NActive += 1
	return()
	
	
p = ['4127800_grdc','1104530_grdc', 
'1134020_grdc', 
'1134030_grdc', 
'1134040_grdc', 
'1134100_grdc', 
'1134110_grdc', 
'1134200_grdc', 
'1134220_grdc', 
'1134250_grdc', 
'1134300_grdc', 
'1134400_grdc', 
'1134450_grdc', 
'1134460_grdc', 
'1134480_grdc', 
'1134600_grdc', 
'1134650_grdc', 
'1134700_grdc', 
'1134850_grdc', 
'1134900_grdc', 
'1216450_grdc', 
'1219500_grdc', 
'1234090_grdc', 
'1234150_grdc', 
'1234201_grdc', 
'1234250_grdc', 
'1237500_grdc', 
'1308600_grdc', 
'1309700_grdc', 
'1309720_grdc', 
'1320100_grdc', 
'1321880_grdc', 
'1322880_grdc', 
'1323550_grdc', 
'1323580_grdc', 
'1324580_grdc', 
'1326300_grdc', 
'1335122_grdc', 
'1336500_grdc', 
'1337100_grdc', 
'1338050_grdc', 
'1338271_grdc', 
'1338300_grdc', 
'1338400_grdc', 
'1339100_grdc', 
'1340500_grdc', 
'1348152_grdc', 
'1348401_grdc', 
'1362100_grdc', 
'1362300_grdc', 
'1362400_grdc', 
'1362500_grdc', 
'1362600_grdc', 
'1425350_grdc', 
'1426300_grdc', 
'1426340_grdc', 
'1426350_grdc', 
'1427500_grdc', 
'1472150_grdc', 
'1472200_grdc', 
'1472305_grdc', 
'1526300_grdc', 
'1531100_grdc', 
'1531700_grdc', 
'1537100_grdc', 
'1537120_grdc', 
'1537130_grdc', 
'1537180_grdc', 
'1537250_grdc', 
'1537300_grdc', 
'1537450_grdc', 
'1566100_grdc', 
'1566206_grdc', 
'1566250_grdc', 
'1566260_grdc', 
'1566500_grdc', 
'1566501_grdc', 
'1566502_grdc', 
'1566520_grdc', 
'1577500_grdc', 
'1580300_grdc', 
'1582700_grdc', 
'1616700_grdc', 
'1619600_grdc', 
'1634400_grdc', 
'1634420_grdc', 
'1634800_grdc', 
'1643420_grdc', 
'1663100_grdc', 
'1663800_grdc', 
'1664100_grdc', 
'1664500_grdc', 
'1664600_grdc', 
'1666130_grdc', 
'1666201_grdc', 
'1666210_grdc', 
'1673100_grdc', 
'1673500_grdc', 
'1673800_grdc', 
'1673900_grdc', 
'1733600_grdc', 
'1737080_grdc', 
'1737100_grdc', 
'1737150_grdc', 
'1748500_grdc', 
'1749030_grdc', 
'1749050_grdc', 
'1749480_grdc', 
'1749500_grdc', 
'1749510_grdc', 
'1749550_grdc', 
'1812300_grdc', 
'1812500_grdc', 
'1813200_grdc', 
'1813460_grdc', 
'1813780_grdc', 
'1815070_grdc', 
'1834101_grdc', 
'1835500_grdc', 
'1835800_grdc', 
'1835900_grdc', 
'1837101_grdc', 
'1837103_grdc', 
'1837104_grdc', 
'1837106_grdc', 
'1837107_grdc', 
'1837200_grdc', 
'1837202_grdc', 
'1837250_grdc', 
'1837253_grdc', 
'1837255_grdc', 
'1837400_grdc', 
'1837401_grdc', 
'1837408_grdc', 
'1837409_grdc', 
'1837410_grdc', 
'1837430_grdc', 
'1837432_grdc', 
'1837433_grdc', 
'1837450_grdc', 
'1837451_grdc', 
'1878500_grdc', 
'1931445_grdc', 
'1931475_grdc', 
'1931770_grdc', 
'2106500_grdc', 
'2151100_grdc', 
'2178500_grdc', 
'2178951_grdc', 
'2180400_grdc', 
'2180500_grdc', 
'2180600_grdc', 
'2180700_grdc', 
'2180710_grdc', 
'2180750_grdc', 
'2180800_grdc', 
'2181400_grdc', 
'2181850_grdc', 
'2181900_grdc', 
'2182050_grdc', 
'2182150_grdc', 
'2182250_grdc', 
'2186800_grdc', 
'2186900_grdc', 
'2186901_grdc', 
'2217100_grdc', 
'2217101_grdc', 
'2217130_grdc', 
'2217200_grdc', 
'2217201_grdc', 
'2218202_grdc', 
'2240100_grdc', 
'2240200_grdc', 
'2260100_grdc', 
'2260110_grdc', 
'2260120_grdc', 
'2260600_grdc', 
'2260700_grdc', 
'2261500_grdc', 
'2261510_grdc', 
'2311102_grdc', 
'2311104_grdc', 
'2311105_grdc', 
'2311109_grdc', 
'2311200_grdc', 
'2311202_grdc', 
'2311203_grdc', 
'2311206_grdc', 
'2311208_grdc', 
'2311300_grdc', 
'2311307_grdc', 
'2311309_grdc', 
'2311310_grdc', 
'2311350_grdc', 
'2311426_grdc', 
'2311550_grdc', 
'2311551_grdc', 
'2311821_grdc', 
'2316204_grdc', 
'2335200_grdc', 
'2335210_grdc', 
'2335260_grdc', 
'2336320_grdc', 
'2336450_grdc', 
'2337100_grdc', 
'2340300_grdc', 
'2357700_grdc', 
'2369005_grdc', 
'2369010_grdc', 
'2369800_grdc', 
'2369900_grdc', 
'2369901_grdc', 
'2369904_grdc', 
'2369907_grdc', 
'2370510_grdc', 
'2371200_grdc', 
'2372102_grdc', 
'2372103_grdc', 
'2372200_grdc', 
'2372201_grdc', 
'2416202_grdc', 
'2416870_grdc', 
'2421400_grdc', 
'2421450_grdc', 
'2423300_grdc', 
'2423500_grdc', 
'2423800_grdc', 
'2423850_grdc', 
'2469049_grdc', 
'2469050_grdc', 
'2469057_grdc', 
'2469072_grdc', 
'2469091_grdc', 
'2469095_grdc', 
'2469098_grdc', 
'2469102_grdc', 
'2469110_grdc', 
'2469111_grdc', 
'2469112_grdc', 
'2469120_grdc', 
'2469121_grdc', 
'2469130_grdc', 
'2469131_grdc', 
'2469135_grdc', 
'2469140_grdc', 
'2469141_grdc', 
'2469145_grdc', 
'2469147_grdc', 
'2469148_grdc', 
'2469260_grdc', 
'2469265_grdc', 
'2469266_grdc', 
'2469267_grdc', 
'2469268_grdc', 
'2469300_grdc', 
'2469301_grdc', 
'2469400_grdc', 
'2495450_grdc', 
'2517600_grdc', 
'2517810_grdc', 
'2517900_grdc', 
'2517920_grdc', 
'2517940_grdc', 
'2548350_grdc', 
'2548400_grdc', 
'2548450_grdc', 
'2548460_grdc', 
'2548500_grdc', 
'2548610_grdc', 
'2548620_grdc', 
'2549210_grdc', 
'2549250_grdc', 
'2549300_grdc', 
'2549350_grdc', 
'2549500_grdc', 
'2550200_grdc', 
'2550350_grdc', 
'2550450_grdc', 
'2550500_grdc', 
'2550600_grdc', 
'2569001_grdc', 
'2569002_grdc', 
'2569003_grdc', 
'2569004_grdc', 
'2569005_grdc', 
'2569010_grdc', 
'2569020_grdc', 
'2569025_grdc', 
'2569026_grdc', 
'2569030_grdc', 
'2569040_grdc', 
'2569041_grdc', 
'2569045_grdc', 
'2569050_grdc', 
'2569051_grdc', 
'2587080_grdc', 
'2587081_grdc', 
'2587082_grdc', 
'2587100_grdc', 
'2587101_grdc', 
'2587102_grdc', 
'2587103_grdc', 
'2587104_grdc', 
'2587105_grdc', 
'2587106_grdc', 
'2587200_grdc', 
'2587210_grdc', 
'2587400_grdc', 
'2588250_grdc', 
'2588300_grdc', 
'2588301_grdc', 
'2588302_grdc', 
'2588304_grdc', 
'2588320_grdc', 
'2588322_grdc', 
'2588481_grdc', 
'2588500_grdc', 
'2588501_grdc', 
'2588550_grdc', 
'2588551_grdc', 
'2588552_grdc', 
'2588553_grdc', 
'2588554_grdc', 
'2588555_grdc', 
'2588560_grdc', 
'2588630_grdc', 
'2588640_grdc', 
'2588650_grdc', 
'2588651_grdc', 
'2588654_grdc', 
'2588655_grdc', 
'2588700_grdc', 
'2588701_grdc', 
'2588702_grdc', 
'2588703_grdc', 
'2588704_grdc', 
'2588705_grdc', 
'2588708_grdc', 
'2588900_grdc', 
'2588920_grdc', 
'2589100_grdc', 
'2589101_grdc', 
'2589200_grdc', 
'2589201_grdc', 
'2589202_grdc', 
'2589204_grdc', 
'2589210_grdc', 
'2589220_grdc', 
'2589240_grdc', 
'2589270_grdc', 
'2589280_grdc', 
'2589310_grdc', 
'2589320_grdc', 
'2589350_grdc', 
'2589360_grdc', 
'2589370_grdc', 
'2589380_grdc', 
'2589390_grdc', 
'2589400_grdc', 
'2589410_grdc', 
'2589420_grdc', 
'2589500_grdc', 
'2589502_grdc', 
'2589505_grdc', 
'2589506_grdc', 
'2589550_grdc', 
'2589600_grdc', 
'2589700_grdc', 
'2589701_grdc', 
'2589702_grdc', 
'2589703_grdc', 
'2589750_grdc', 
'2589751_grdc', 
'2589752_grdc', 
'2589753_grdc', 
'2589800_grdc', 
'2589801_grdc', 
'2590100_grdc', 
'2590101_grdc', 
'2590200_grdc', 
'2590220_grdc', 
'2590230_grdc', 
'2590300_grdc', 
'2590301_grdc', 
'2590400_grdc', 
'2591100_grdc', 
'2591201_grdc', 
'2591220_grdc', 
'2591230_grdc', 
'2591800_grdc', 
'2591801_grdc', 
'2591802_grdc', 
'2595400_grdc', 
'2605450_grdc', 
'2605500_grdc', 
'2605510_grdc', 
'2617110_grdc', 
'2646100_grdc', 
'2646200_grdc', 
'2651080_grdc', 
'2677100_grdc', 
'2677300_grdc', 
'2678100_grdc', 
'2678200_grdc', 
'2707500_grdc', 
'2707600_grdc', 
'2744200_grdc', 
'2817400_grdc', 
'2836500_grdc', 
'2837100_grdc', 
'2846800_grdc', 
'2853150_grdc', 
'2853300_grdc', 
'2853500_grdc', 
'2854100_grdc', 
'2854450_grdc', 
'2854700_grdc', 
'2854800_grdc', 
'2855800_grdc', 
'2856320_grdc', 
'2856500_grdc', 
'2856550_grdc', 
'2856600_grdc', 
'2876400_grdc', 
'2876500_grdc', 
'2878200_grdc', 
'2878250_grdc', 
'2878300_grdc', 
'2901201_grdc', 
'2901203_grdc', 
'2901204_grdc', 
'2901205_grdc', 
'2901210_grdc', 
'2901300_grdc', 
'2901900_grdc', 
'2902850_grdc', 
'2903035_grdc', 
'2903051_grdc', 
'2903053_grdc', 
'2903054_grdc', 
'2903055_grdc', 
'2903056_grdc', 
'2903057_grdc', 
'2903058_grdc', 
'2903070_grdc', 
'2903071_grdc', 
'2903080_grdc', 
'2903081_grdc', 
'2903110_grdc', 
'2903111_grdc', 
'2903115_grdc', 
'2903117_grdc', 
'2903120_grdc', 
'2903215_grdc', 
'2903235_grdc', 
'2903236_grdc', 
'2903240_grdc', 
'2903241_grdc', 
'2903300_grdc', 
'2903301_grdc', 
'2903307_grdc', 
'2903310_grdc', 
'2903330_grdc', 
'2903360_grdc', 
'2903402_grdc', 
'2903405_grdc', 
'2903415_grdc', 
'2903418_grdc', 
'2903423_grdc', 
'2903424_grdc', 
'2903425_grdc', 
'2903426_grdc', 
'2903427_grdc', 
'2903481_grdc', 
'2903482_grdc', 
'2903485_grdc', 
'2903486_grdc', 
'2903487_grdc', 
'2903488_grdc', 
'2903490_grdc', 
'2903491_grdc', 
'2903493_grdc', 
'2903601_grdc', 
'2903603_grdc', 
'2903604_grdc', 
'2903605_grdc', 
'2903650_grdc', 
'2903651_grdc', 
'2903652_grdc', 
'2903653_grdc', 
'2903654_grdc', 
'2903655_grdc', 
'2903660_grdc', 
'2903665_grdc', 
'2903700_grdc', 
'2903701_grdc', 
'2903702_grdc', 
'2903703_grdc', 
'2903704_grdc', 
'2903705_grdc', 
'2903707_grdc', 
'2903710_grdc', 
'2903715_grdc', 
'2903720_grdc', 
'2903722_grdc', 
'2903728_grdc', 
'2903732_grdc', 
'2903741_grdc', 
'2903745_grdc', 
'2903750_grdc', 
'2903810_grdc', 
'2903811_grdc', 
'2903920_grdc', 
'2903985_grdc', 
'2903991_grdc', 
'2906201_grdc', 
'2906300_grdc', 
'2906880_grdc', 
'2907010_grdc', 
'2907020_grdc', 
'2907041_grdc', 
'2907042_grdc', 
'2907048_grdc', 
'2907062_grdc', 
'2907080_grdc', 
'2907106_grdc', 
'2907220_grdc', 
'2907227_grdc', 
'2907402_grdc', 
'2907915_grdc', 
'2908010_grdc', 
'2908011_grdc', 
'2908012_grdc', 
'2908013_grdc', 
'2908015_grdc', 
'2908039_grdc', 
'2908050_grdc', 
'2908100_grdc', 
'2908103_grdc', 
'2908125_grdc', 
'2908127_grdc', 
'2908148_grdc', 
'2908150_grdc', 
'2908152_grdc', 
'2908157_grdc', 
'2908160_grdc', 
'2908161_grdc', 
'2908180_grdc', 
'2908181_grdc', 
'2908182_grdc', 
'2908184_grdc', 
'2908190_grdc', 
'2908191_grdc', 
'2908194_grdc', 
'2908196_grdc', 
'2908200_grdc', 
'2908201_grdc', 
'2908210_grdc', 
'2908211_grdc', 
'2908301_grdc', 
'2908303_grdc', 
'2908305_grdc', 
'2909152_grdc', 
'2909154_grdc', 
'2909155_grdc', 
'2909158_grdc', 
'2909159_grdc', 
'2909160_grdc', 
'2909163_grdc', 
'2909164_grdc', 
'2909166_grdc', 
'2909200_grdc', 
'2909210_grdc', 
'2909215_grdc', 
'2909230_grdc', 
'2909238_grdc', 
'2909261_grdc', 
'2909262_grdc', 
'2909270_grdc', 
'2909271_grdc', 
'2909280_grdc', 
'2909290_grdc', 
'2909314_grdc', 
'2909315_grdc', 
'2909321_grdc', 
'2909323_grdc', 
'2909330_grdc', 
'2909360_grdc', 
'2909361_grdc', 
'2909362_grdc', 
'2909368_grdc', 
'2909390_grdc', 
'2909391_grdc', 
'2909393_grdc', 
'2909401_grdc', 
'2909402_grdc', 
'2909403_grdc', 
'2909430_grdc', 
'2909431_grdc', 
'2909540_grdc', 
'2909550_grdc', 
'2909560_grdc', 
'2909570_grdc', 
'2909597_grdc', 
'2909703_grdc', 
'2909704_grdc', 
'2909705_grdc', 
'2909710_grdc', 
'2909752_grdc', 
'2909950_grdc', 
'2910100_grdc', 
'2910101_grdc', 
'2910102_grdc', 
'2910120_grdc', 
'2910130_grdc', 
'2910160_grdc', 
'2910161_grdc', 
'2910201_grdc', 
'2910205_grdc', 
'2910240_grdc', 
'2910241_grdc', 
'2910260_grdc', 
'2910300_grdc', 
'2910301_grdc', 
'2910310_grdc', 
'2910312_grdc', 
'2910313_grdc', 
'2910314_grdc', 
'2910326_grdc', 
'2910327_grdc', 
'2910328_grdc', 
'2910331_grdc', 
'2910340_grdc', 
'2910370_grdc', 
'2910375_grdc', 
'2910413_grdc', 
'2910442_grdc', 
'2910446_grdc', 
'2910472_grdc', 
'2910476_grdc', 
'2910490_grdc', 
'2910491_grdc', 
'2910493_grdc', 
'2910494_grdc', 
'2910501_grdc', 
'2910510_grdc', 
'2910511_grdc', 
'2910512_grdc', 
'2910514_grdc', 
'2910521_grdc', 
'2910580_grdc', 
'2910600_grdc', 
'2910601_grdc', 
'2910603_grdc', 
'2910604_grdc', 
'2910605_grdc', 
'2910607_grdc', 
'2910651_grdc', 
'2910660_grdc', 
'2910661_grdc', 
'2910665_grdc', 
'2910668_grdc', 
'2910700_grdc', 
'2910718_grdc', 
'2910721_grdc', 
'2910731_grdc', 
'2911095_grdc', 
'2911096_grdc', 
'2911097_grdc', 
'2911098_grdc', 
'2911100_grdc', 
'2911101_grdc', 
'2911209_grdc', 
'2911303_grdc', 
'2911304_grdc', 
'2911307_grdc', 
'2911309_grdc', 
'2911451_grdc', 
'2911452_grdc', 
'2911453_grdc', 
'2911460_grdc', 
'2911630_grdc', 
'2911650_grdc', 
'2911652_grdc', 
'2911657_grdc', 
'2911658_grdc', 
'2911674_grdc', 
'2911700_grdc', 
'2911701_grdc', 
'2911731_grdc', 
'2911860_grdc', 
'2911865_grdc', 
'2911875_grdc', 
'2911960_grdc', 
'2912551_grdc', 
'2912552_grdc', 
'2912553_grdc', 
'2912554_grdc', 
'2912555_grdc', 
'2912556_grdc', 
'2912560_grdc', 
'2912561_grdc', 
'2912565_grdc', 
'2912601_grdc', 
'2912602_grdc', 
'2912610_grdc', 
'2912617_grdc', 
'2912620_grdc', 
'2912640_grdc', 
'2912645_grdc', 
'2964120_grdc', 
'2964123_grdc', 
'2964124_grdc', 
'2964125_grdc', 
'2964127_grdc', 
'2964128_grdc', 
'2964130_grdc', 
'2964150_grdc', 
'2966800_grdc', 
'2966999_grdc', 
'2969010_grdc', 
'2969011_grdc', 
'2969012_grdc', 
'2969013_grdc', 
'2969020_grdc', 
'2969029_grdc', 
'2969030_grdc', 
'2969083_grdc', 
'2969086_grdc', 
'2969087_grdc', 
'2969090_grdc', 
'2969095_grdc', 
'2969096_grdc', 
'2969100_grdc', 
'2969101_grdc', 
'2969123_grdc', 
'2969124_grdc', 
'2969150_grdc', 
'2969151_grdc', 
'2969152_grdc', 
'2969153_grdc', 
'2969200_grdc', 
'2969211_grdc', 
'2969220_grdc', 
'2969221_grdc', 
'2969230_grdc', 
'2969231_grdc', 
'2969232_grdc', 
'2969256_grdc', 
'2969257_grdc', 
'2969417_grdc', 
'2969420_grdc', 
'2969430_grdc', 
'2969500_grdc', 
'2969501_grdc', 
'2997120_grdc', 
'2997250_grdc', 
'2997251_grdc', 
'2997252_grdc', 
'2997253_grdc', 
'2997510_grdc', 
'2997580_grdc', 
'2997586_grdc', 
'2997587_grdc', 
'2998200_grdc', 
'2998300_grdc', 
'2998320_grdc', 
'2998330_grdc', 
'2998340_grdc', 
'2998345_grdc', 
'2998346_grdc', 
'2998454_grdc', 
'2998504_grdc', 
'2998505_grdc', 
'2998511_grdc', 
'2998520_grdc', 
'2998521_grdc', 
'2998522_grdc', 
'2998550_grdc', 
'2998555_grdc', 
'2998556_grdc', 
'2998557_grdc', 
'2998558_grdc', 
'2998560_grdc', 
'2998561_grdc', 
'2998562_grdc', 
'2998701_grdc', 
'2998710_grdc', 
'2998720_grdc', 
'2998740_grdc', 
'2998800_grdc', 
'2998801_grdc', 
'2999100_grdc', 
'2999110_grdc', 
'2999111_grdc', 
'2999150_grdc', 
'2999151_grdc', 
'2999461_grdc', 
'2999470_grdc', 
'2999471_grdc', 
'2999472_grdc', 
'2999474_grdc', 
'2999850_grdc', 
'2999922_grdc', 
'3102400_grdc', 
'3102450_grdc', 
'3102500_grdc', 
'3103150_grdc', 
'3103300_grdc', 
'3103400_grdc', 
'3103430_grdc', 
'3103460_grdc', 
'3103530_grdc', 
'3103600_grdc', 
'3107250_grdc', 
'3206610_grdc', 
'3206620_grdc', 
'3206630_grdc', 
'3206640_grdc', 
'3206700_grdc', 
'3206720_grdc', 
'3308300_grdc', 
'3308400_grdc', 
'3309300_grdc', 
'3410500_grdc', 
'3411300_grdc', 
'3411500_grdc', 
'3513300_grdc', 
'3613050_grdc', 
'3613060_grdc', 
'3618053_grdc', 
'3618090_grdc', 
'3618110_grdc', 
'3618115_grdc', 
'3618120_grdc', 
'3618121_grdc', 
'3618150_grdc', 
'3618200_grdc', 
'3618500_grdc', 
'3618710_grdc', 
'3618711_grdc', 
'3618715_grdc', 
'3618720_grdc', 
'3618721_grdc', 
'3618722_grdc', 
'3618730_grdc', 
'3618731_grdc', 
'3618740_grdc', 
'3618950_grdc', 
'3618951_grdc', 
'3844100_grdc', 
'4101200_grdc', 
'4101250_grdc', 
'4101300_grdc', 
'4101400_grdc', 
'4101450_grdc', 
'4101451_grdc', 
'4101500_grdc', 
'4101501_grdc', 
'4101700_grdc', 
'4101900_grdc', 
'4101901_grdc', 
'4102100_grdc', 
'4102110_grdc', 
'4102200_grdc', 
'4102400_grdc', 
'4102740_grdc', 
'4102750_grdc', 
'4103200_grdc', 
'4103300_grdc', 
'4103450_grdc', 
'4103451_grdc', 
'4103500_grdc', 
'4103505_grdc', 
'4103520_grdc', 
'4103550_grdc', 
'4103560_grdc', 
'4103570_grdc', 
'4103600_grdc', 
'4103602_grdc', 
'4103610_grdc', 
'4103620_grdc', 
'4103621_grdc', 
'4103622_grdc', 
'4103700_grdc', 
'4103710_grdc', 
'4103750_grdc', 
'4103751_grdc', 
'4103800_grdc', 
'4103820_grdc', 
'4105050_grdc', 
'4105060_grdc', 
'4105300_grdc', 
'4105310_grdc', 
'4105450_grdc', 
'4105700_grdc', 
'4105710_grdc', 
'4105720_grdc', 
'4105800_grdc', 
'4105805_grdc', 
'4105810_grdc', 
'4105820_grdc', 
'4105850_grdc', 
'4105851_grdc', 
'4105852_grdc', 
'4106600_grdc', 
'4113300_grdc', 
'4113301_grdc', 
'4113302_grdc', 
'4113303_grdc', 
'4113320_grdc', 
'4113321_grdc', 
'4114615_grdc', 
'4115080_grdc', 
'4115081_grdc', 
'4115100_grdc', 
'4115101_grdc', 
'4115102_grdc', 
'4115105_grdc', 
'4115106_grdc', 
'4115200_grdc', 
'4115201_grdc', 
'4115202_grdc', 
'4115203_grdc', 
'4115204_grdc', 
'4115205_grdc', 
'4115206_grdc', 
'4115221_grdc', 
'4115260_grdc', 
'4115261_grdc', 
'4115262_grdc', 
'4115280_grdc', 
'4115281_grdc', 
'4115300_grdc', 
'4115301_grdc', 
'4115320_grdc', 
'4115321_grdc', 
'4115322_grdc', 
'4115331_grdc', 
'4115332_grdc', 
'4115333_grdc', 
'4115340_grdc', 
'4115345_grdc', 
'4115346_grdc', 
'4115347_grdc', 
'4115349_grdc', 
'4115400_grdc', 
'4115401_grdc', 
'4115402_grdc', 
'4115403_grdc', 
'4115410_grdc', 
'4115450_grdc', 
'4115600_grdc', 
'4115700_grdc', 
'4116180_grdc', 
'4116181_grdc', 
'4116182_grdc', 
'4116183_grdc', 
'4116184_grdc', 
'4116185_grdc', 
'4116186_grdc', 
'4116187_grdc', 
'4116188_grdc', 
'4116189_grdc', 
'4116190_grdc', 
'4116191_grdc', 
'4116192_grdc', 
'4116300_grdc', 
'4116301_grdc', 
'4116302_grdc', 
'4116310_grdc', 
'4116320_grdc', 
'4116325_grdc', 
'4116330_grdc', 
'4116331_grdc', 
'4116332_grdc', 
'4116400_grdc', 
'4116401_grdc', 
'4116402_grdc', 
'4116450_grdc', 
'4116470_grdc', 
'4116471_grdc', 
'4119080_grdc', 
'4119100_grdc', 
'4119101_grdc', 
'4119150_grdc', 
'4119170_grdc', 
'4119200_grdc', 
'4119201_grdc', 
'4119250_grdc', 
'4119251_grdc', 
'4119252_grdc', 
'4119260_grdc', 
'4119261_grdc', 
'4119262_grdc', 
'4119263_grdc', 
'4119264_grdc', 
'4119265_grdc', 
'4119270_grdc', 
'4119280_grdc', 
'4119281_grdc', 
'4119282_grdc', 
'4119285_grdc', 
'4119286_grdc', 
'4119300_grdc', 
'4119310_grdc', 
'4119311_grdc', 
'4119315_grdc', 
'4119317_grdc', 
'4119318_grdc', 
'4119400_grdc', 
'4119401_grdc', 
'4119440_grdc', 
'4119441_grdc', 
'4119442_grdc', 
'4119445_grdc', 
'4119447_grdc', 
'4119450_grdc', 
'4119451_grdc', 
'4119452_grdc', 
'4119453_grdc', 
'4119460_grdc', 
'4119510_grdc', 
'4119650_grdc', 
'4119800_grdc', 
'4120120_grdc', 
'4120121_grdc', 
'4120200_grdc', 
'4120201_grdc', 
'4120202_grdc', 
'4120300_grdc', 
'4120310_grdc', 
'4120311_grdc', 
'4120330_grdc', 
'4120900_grdc', 
'4120902_grdc', 
'4120903_grdc', 
'4120950_grdc', 
'4120951_grdc', 
'4120952_grdc', 
'4120953_grdc', 
'4120955_grdc', 
'4120956_grdc', 
'4121100_grdc', 
'4121101_grdc', 
'4121141_grdc', 
'4121142_grdc', 
'4121146_grdc', 
'4121160_grdc', 
'4121161_grdc', 
'4121300_grdc', 
'4121301_grdc', 
'4121320_grdc', 
'4121340_grdc', 
'4121341_grdc', 
'4121400_grdc', 
'4121401_grdc', 
'4121800_grdc', 
'4121801_grdc', 
'4121802_grdc', 
'4122100_grdc', 
'4122101_grdc', 
'4122110_grdc', 
'4122130_grdc', 
'4122131_grdc', 
'4122133_grdc', 
'4122150_grdc', 
'4122151_grdc', 
'4122152_grdc', 
'4122153_grdc', 
'4122160_grdc', 
'4122165_grdc', 
'4122200_grdc', 
'4122201_grdc', 
'4122210_grdc', 
'4122211_grdc', 
'4122222_grdc', 
'4122240_grdc', 
'4122251_grdc', 
'4122280_grdc', 
'4122281_grdc', 
'4122300_grdc', 
'4122350_grdc', 
'4122351_grdc', 
'4122352_grdc', 
'4122600_grdc', 
'4122601_grdc', 
'4122602_grdc', 
'4122603_grdc', 
'4122610_grdc', 
'4122630_grdc', 
'4122635_grdc', 
'4122636_grdc', 
'4122637_grdc', 
'4122638_grdc', 
'4122639_grdc', 
'4122650_grdc', 
'4122700_grdc', 
'4122701_grdc', 
'4122710_grdc', 
'4122900_grdc', 
'4122901_grdc', 
'4122902_grdc', 
'4122903_grdc', 
'4123050_grdc', 
'4123060_grdc', 
'4123061_grdc', 
'4123062_grdc', 
'4123063_grdc', 
'4123070_grdc', 
'4123080_grdc', 
'4123081_grdc', 
'4123095_grdc', 
'4123130_grdc', 
'4123131_grdc', 
'4123135_grdc', 
'4123136_grdc', 
'4123200_grdc', 
'4123201_grdc', 
'4123202_grdc', 
'4123205_grdc', 
'4123206_grdc', 
'4123207_grdc', 
'4123230_grdc', 
'4123250_grdc', 
'4123260_grdc', 
'4123268_grdc', 
'4123270_grdc', 
'4123271_grdc', 
'4123272_grdc', 
'4123277_grdc', 
'4123278_grdc', 
'4123300_grdc', 
'4123301_grdc', 
'4123330_grdc', 
'4123350_grdc', 
'4123352_grdc', 
'4123355_grdc', 
'4123380_grdc', 
'4123381_grdc', 
'4123400_grdc', 
'4125010_grdc', 
'4125025_grdc', 
'4125026_grdc', 
'4125027_grdc', 
'4125028_grdc', 
'4125050_grdc', 
'4125055_grdc', 
'4125060_grdc', 
'4125061_grdc', 
'4125062_grdc', 
'4125063_grdc', 
'4125064_grdc', 
'4125070_grdc', 
'4125080_grdc', 
'4125500_grdc', 
'4125550_grdc', 
'4125551_grdc', 
'4125555_grdc', 
'4125800_grdc', 
'4125801_grdc', 
'4125802_grdc', 
'4125803_grdc', 
'4125804_grdc', 
'4125900_grdc', 
'4125901_grdc', 
'4125902_grdc', 
'4125903_grdc', 
'4125910_grdc', 
'4125911_grdc', 
'4125925_grdc', 
'4125940_grdc', 
'4125941_grdc', 
'4126100_grdc', 
'4126350_grdc', 
'4126700_grdc', 
'4126701_grdc', 
'4126702_grdc', 
'4126750_grdc', 
'4126800_grdc', 
'4126801_grdc', 
'4126802_grdc', 
'4126803_grdc', 
'4126804_grdc', 
'4126805_grdc', 
'4126806_grdc', 
'4126810_grdc', 
'4126815_grdc', 
'4126850_grdc', 
'4126851_grdc', 
'4127100_grdc', 
'4127200_grdc', 
'4127310_grdc', 
'4127400_grdc', 
'4127500_grdc', 
'4127501_grdc', 
'4127502_grdc', 
'4127503_grdc', 
'4127800_grdc', 
'4127910_grdc', 
'4127930_grdc', 
'4131030_grdc', 
'4131031_grdc', 
'4132200_grdc', 
'4132800_grdc', 
'4132900_grdc', 
'4133100_grdc', 
'4133200_grdc', 
'4133250_grdc', 
'4133260_grdc', 
'4133300_grdc', 
'4133400_grdc', 
'4133401_grdc', 
'4133450_grdc', 
'4133500_grdc', 
'4133501_grdc', 
'4133750_grdc', 
'4133751_grdc', 
'4133801_grdc', 
'4134300_grdc', 
'4134400_grdc', 
'4134700_grdc', 
'4135100_grdc', 
'4135200_grdc', 
'4135201_grdc', 
'4135205_grdc', 
'4135210_grdc', 
'4135215_grdc', 
'4135800_grdc', 
'4136300_grdc', 
'4136411_grdc', 
'4136500_grdc', 
'4143300_grdc', 
'4143310_grdc', 
'4143500_grdc', 
'4143550_grdc', 
'4143770_grdc', 
'4146080_grdc', 
'4146081_grdc', 
'4146082_grdc', 
'4146083_grdc', 
'4146085_grdc', 
'4146110_grdc', 
'4146111_grdc', 
'4146112_grdc', 
'4146115_grdc', 
'4146155_grdc', 
'4146160_grdc', 
'4146161_grdc', 
'4146180_grdc', 
'4146185_grdc', 
'4146190_grdc', 
'4146220_grdc', 
'4146270_grdc', 
'4146280_grdc', 
'4146281_grdc', 
'4146360_grdc', 
'4146650_grdc', 
'4146670_grdc', 
'4146901_grdc', 
'4147010_grdc', 
'4147011_grdc', 
'4147030_grdc', 
'4147031_grdc', 
'4147050_grdc', 
'4147051_grdc', 
'4147060_grdc', 
'4147061_grdc', 
'4147110_grdc', 
'4147111_grdc', 
'4147210_grdc', 
'4147320_grdc', 
'4147330_grdc', 
'4147340_grdc', 
'4147350_grdc', 
'4147360_grdc', 
'4147380_grdc', 
'4147381_grdc', 
'4147382_grdc', 
'4147460_grdc', 
'4147461_grdc', 
'4147462_grdc', 
'4147463_grdc', 
'4147465_grdc', 
'4147480_grdc', 
'4147491_grdc', 
'4147500_grdc', 
'4147501_grdc', 
'4147502_grdc', 
'4147505_grdc', 
'4147510_grdc', 
'4147600_grdc', 
'4147601_grdc', 
'4147605_grdc', 
'4147606_grdc', 
'4147650_grdc', 
'4147651_grdc', 
'4147700_grdc', 
'4147701_grdc', 
'4147702_grdc', 
'4147703_grdc', 
'4147704_grdc', 
'4147710_grdc', 
'4147720_grdc', 
'4147721_grdc', 
'4147725_grdc', 
'4147726_grdc', 
'4147900_grdc', 
'4147901_grdc', 
'4147902_grdc', 
'4147904_grdc', 
'4147907_grdc', 
'4147950_grdc', 
'4148090_grdc', 
'4148110_grdc', 
'4148120_grdc', 
'4148121_grdc', 
'4148122_grdc', 
'4148210_grdc', 
'4148230_grdc', 
'4148231_grdc', 
'4148232_grdc', 
'4148300_grdc', 
'4148321_grdc', 
'4148410_grdc', 
'4148530_grdc', 
'4148535_grdc', 
'4148540_grdc', 
'4148541_grdc', 
'4148545_grdc', 
'4148546_grdc', 
'4148550_grdc', 
'4148570_grdc', 
'4148650_grdc', 
'4148655_grdc', 
'4148720_grdc', 
'4148750_grdc', 
'4149110_grdc', 
'4149120_grdc', 
'4149121_grdc', 
'4149122_grdc', 
'4149300_grdc', 
'4149301_grdc', 
'4149360_grdc', 
'4149400_grdc', 
'4149401_grdc', 
'4149405_grdc', 
'4149410_grdc', 
'4149413_grdc', 
'4149415_grdc', 
'4149420_grdc', 
'4149421_grdc', 
'4149440_grdc', 
'4149441_grdc', 
'4149630_grdc', 
'4149631_grdc', 
'4149632_grdc', 
'4149670_grdc', 
'4149680_grdc', 
'4149681_grdc', 
'4149682_grdc', 
'4149690_grdc', 
'4149691_grdc', 
'4149711_grdc', 
'4149780_grdc', 
'4149781_grdc', 
'4149850_grdc', 
'4149851_grdc', 
'4150450_grdc', 
'4150451_grdc', 
'4150500_grdc', 
'4150501_grdc', 
'4150502_grdc', 
'4150503_grdc', 
'4150507_grdc', 
'4150509_grdc', 
'4150600_grdc', 
'4150601_grdc', 
'4150605_grdc', 
'4150680_grdc', 
'4150681_grdc', 
'4150700_grdc', 
'4150935_grdc', 
'4151511_grdc', 
'4151512_grdc', 
'4151513_grdc', 
'4151514_grdc', 
'4151650_grdc', 
'4151651_grdc', 
'4151800_grdc', 
'4151801_grdc', 
'4151802_grdc', 
'4151803_grdc', 
'4151804_grdc', 
'4151805_grdc', 
'4152050_grdc', 
'4152100_grdc', 
'4152103_grdc', 
'4152202_grdc', 
'4152300_grdc', 
'4152450_grdc', 
'4152460_grdc', 
'4152550_grdc', 
'4152551_grdc', 
'4152552_grdc', 
'4152553_grdc', 
'4152580_grdc', 
'4152590_grdc', 
'4152600_grdc', 
'4152601_grdc', 
'4152602_grdc', 
'4152650_grdc', 
'4152651_grdc', 
'4152652_grdc', 
'4152660_grdc', 
'4152700_grdc', 
'4152701_grdc', 
'4185300_grdc', 
'4185301_grdc', 
'4201010_grdc', 
'4203050_grdc', 
'4203051_grdc', 
'4203060_grdc', 
'4203080_grdc', 
'4203150_grdc', 
'4203151_grdc', 
'4203152_grdc', 
'4203160_grdc', 
'4203165_grdc', 
'4203200_grdc', 
'4203201_grdc', 
'4203202_grdc', 
'4203210_grdc', 
'4203250_grdc', 
'4203300_grdc', 
'4203320_grdc', 
'4203400_grdc', 
'4203420_grdc', 
'4203500_grdc', 
'4203501_grdc', 
'4203502_grdc', 
'4203503_grdc', 
'4203510_grdc', 
'4203520_grdc', 
'4203530_grdc', 
'4203535_grdc', 
'4203760_grdc', 
'4203770_grdc', 
'4203780_grdc', 
'4203790_grdc', 
'4203820_grdc', 
'4203900_grdc', 
'4203901_grdc', 
'4203910_grdc', 
'4203911_grdc', 
'4204010_grdc', 
'4204050_grdc', 
'4204100_grdc', 
'4204500_grdc', 
'4204900_grdc', 
'4205100_grdc', 
'4206601_grdc', 
'4207150_grdc', 
'4207160_grdc', 
'4207180_grdc', 
'4207190_grdc', 
'4207250_grdc', 
'4207300_grdc', 
'4207305_grdc', 
'4207310_grdc', 
'4207320_grdc', 
'4207750_grdc', 
'4207800_grdc', 
'4207830_grdc', 
'4207850_grdc', 
'4207860_grdc', 
'4207900_grdc', 
'4208005_grdc', 
'4208025_grdc', 
'4208040_grdc', 
'4208041_grdc', 
'4208042_grdc', 
'4208044_grdc', 
'4208050_grdc', 
'4208065_grdc', 
'4208100_grdc', 
'4208110_grdc', 
'4208120_grdc', 
'4208135_grdc', 
'4208167_grdc', 
'4208170_grdc', 
'4208181_grdc', 
'4208190_grdc', 
'4208200_grdc', 
'4208220_grdc', 
'4208221_grdc', 
'4208225_grdc', 
'4208240_grdc', 
'4208251_grdc', 
'4208252_grdc', 
'4208255_grdc', 
'4208256_grdc', 
'4208258_grdc', 
'4208260_grdc', 
'4208270_grdc', 
'4208271_grdc', 
'4208272_grdc', 
'4208274_grdc', 
'4208275_grdc', 
'4208280_grdc', 
'4208287_grdc', 
'4208290_grdc', 
'4208295_grdc', 
'4208300_grdc', 
'4208305_grdc', 
'4208310_grdc', 
'4208311_grdc', 
'4208315_grdc', 
'4208320_grdc', 
'4208330_grdc', 
'4208350_grdc', 
'4208360_grdc', 
'4208365_grdc', 
'4208366_grdc', 
'4208385_grdc', 
'4208386_grdc', 
'4208400_grdc', 
'4208410_grdc', 
'4208420_grdc', 
'4208440_grdc', 
'4208441_grdc', 
'4208450_grdc', 
'4208451_grdc', 
'4208453_grdc', 
'4208455_grdc', 
'4208456_grdc', 
'4208457_grdc', 
'4208458_grdc', 
'4208461_grdc', 
'4208470_grdc', 
'4208471_grdc', 
'4208475_grdc', 
'4208477_grdc', 
'4208491_grdc', 
'4208492_grdc', 
'4208495_grdc', 
'4208500_grdc', 
'4208516_grdc', 
'4208541_grdc', 
'4208550_grdc', 
'4208561_grdc', 
'4208562_grdc', 
'4208570_grdc', 
'4208590_grdc', 
'4208592_grdc', 
'4208596_grdc', 
'4208630_grdc', 
'4208640_grdc', 
'4208645_grdc', 
'4208646_grdc', 
'4208651_grdc', 
'4208715_grdc', 
'4208730_grdc', 
'4208733_grdc', 
'4208734_grdc', 
'4208735_grdc', 
'4208820_grdc', 
'4208821_grdc', 
'4208822_grdc', 
'4208870_grdc', 
'4208871_grdc', 
'4208880_grdc', 
'4208881_grdc', 
'4208916_grdc', 
'4208920_grdc', 
'4208941_grdc', 
'4208942_grdc', 
'4208947_grdc', 
'4208962_grdc', 
'4208970_grdc', 
'4208971_grdc', 
'4208975_grdc', 
'4208986_grdc', 
'4208987_grdc', 
'4209150_grdc', 
'4209155_grdc', 
'4209400_grdc', 
'4209401_grdc', 
'4209402_grdc', 
'4209410_grdc', 
'4209500_grdc', 
'4209550_grdc', 
'4209580_grdc', 
'4209600_grdc', 
'4209805_grdc', 
'4209806_grdc', 
'4209810_grdc', 
'4209850_grdc', 
'4210450_grdc', 
'4212700_grdc', 
'4213030_grdc', 
'4213031_grdc', 
'4213032_grdc', 
'4213033_grdc', 
'4213040_grdc', 
'4213041_grdc', 
'4213042_grdc', 
'4213043_grdc', 
'4213044_grdc', 
'4213045_grdc', 
'4213046_grdc', 
'4213047_grdc', 
'4213101_grdc', 
'4213102_grdc', 
'4213103_grdc', 
'4213110_grdc', 
'4213111_grdc', 
'4213210_grdc', 
'4213211_grdc', 
'4213250_grdc', 
'4213300_grdc', 
'4213355_grdc', 
'4213375_grdc', 
'4213400_grdc', 
'4213401_grdc', 
'4213410_grdc', 
'4213440_grdc', 
'4213550_grdc', 
'4213552_grdc', 
'4213562_grdc', 
'4213563_grdc', 
'4213566_grdc', 
'4213569_grdc', 
'4213570_grdc', 
'4213573_grdc', 
'4213575_grdc', 
'4213650_grdc', 
'4213680_grdc', 
'4213681_grdc', 
'4213682_grdc', 
'4213683_grdc', 
'4213684_grdc', 
'4213710_grdc', 
'4213711_grdc', 
'4213712_grdc', 
'4213730_grdc', 
'4213740_grdc', 
'4213800_grdc', 
'4213801_grdc', 
'4213802_grdc', 
'4213803_grdc', 
'4213804_grdc', 
'4213810_grdc', 
'4213905_grdc', 
'4214005_grdc', 
'4214010_grdc', 
'4214025_grdc', 
'4214036_grdc', 
'4214040_grdc', 
'4214050_grdc', 
'4214051_grdc', 
'4214060_grdc', 
'4214090_grdc', 
'4214100_grdc', 
'4214105_grdc', 
'4214106_grdc', 
'4214260_grdc', 
'4214261_grdc', 
'4214262_grdc', 
'4214270_grdc', 
'4214275_grdc', 
'4214298_grdc', 
'4214300_grdc', 
'4214310_grdc', 
'4214350_grdc', 
'4214351_grdc', 
'4214360_grdc', 
'4214390_grdc', 
'4214440_grdc', 
'4214450_grdc', 
'4214480_grdc', 
'4214490_grdc', 
'4214510_grdc', 
'4214515_grdc', 
'4214517_grdc', 
'4214519_grdc', 
'4214520_grdc', 
'4214530_grdc', 
'4214531_grdc', 
'4214540_grdc', 
'4214550_grdc', 
'4214551_grdc', 
'4214555_grdc', 
'4214560_grdc', 
'4214570_grdc', 
'4214580_grdc', 
'4214590_grdc', 
'4214610_grdc', 
'4214620_grdc', 
'4214621_grdc', 
'4214650_grdc', 
'4214655_grdc', 
'4214670_grdc', 
'4214680_grdc', 
'4214690_grdc', 
'4214701_grdc', 
'4214750_grdc', 
'4214760_grdc', 
'4214770_grdc', 
'4214775_grdc', 
'4214800_grdc', 
'4214801_grdc', 
'4214810_grdc', 
'4214830_grdc', 
'4214900_grdc', 
'4214920_grdc', 
'4214940_grdc', 
'4214943_grdc', 
'4214950_grdc', 
'4215200_grdc', 
'4215210_grdc', 
'4215220_grdc', 
'4215260_grdc', 
'4215320_grdc', 
'4215425_grdc', 
'4215426_grdc', 
'4215660_grdc', 
'4215670_grdc', 
'4215700_grdc', 
'4215705_grdc', 
'4215706_grdc', 
'4220500_grdc', 
'4220501_grdc', 
'4231200_grdc', 
'4231250_grdc', 
'4231600_grdc', 
'4231601_grdc', 
'4231602_grdc', 
'4231610_grdc', 
'4231620_grdc', 
'4231621_grdc', 
'4231630_grdc', 
'4231650_grdc', 
'4232700_grdc', 
'4232750_grdc', 
'4235100_grdc', 
'4235101_grdc', 
'4235300_grdc', 
'4235301_grdc', 
'4236010_grdc', 
'4236600_grdc', 
'4236700_grdc', 
'4243050_grdc', 
'4243080_grdc', 
'4243100_grdc', 
'4243101_grdc', 
'4243150_grdc', 
'4243151_grdc', 
'4243215_grdc', 
'4243230_grdc', 
'4243240_grdc', 
'4243270_grdc', 
'4243280_grdc', 
'4243290_grdc', 
'4243300_grdc', 
'4243301_grdc', 
'4243315_grdc', 
'4243320_grdc', 
'4243330_grdc', 
'4243340_grdc', 
'4243360_grdc', 
'4244370_grdc', 
'4244410_grdc', 
'4244430_grdc', 
'4244450_grdc', 
'4244460_grdc', 
'4244500_grdc', 
'4244550_grdc', 
'4244580_grdc', 
'4244600_grdc', 
'4244605_grdc', 
'4244610_grdc', 
'4244620_grdc', 
'4244630_grdc', 
'4244635_grdc', 
'4244640_grdc', 
'4244655_grdc', 
'4244730_grdc', 
'4244760_grdc', 
'4244770_grdc', 
'4244788_grdc', 
'4244795_grdc', 
'4244820_grdc', 
'4244840_grdc', 
'4244850_grdc', 
'4244870_grdc', 
'4244880_grdc', 
'4244890_grdc', 
'4244915_grdc', 
'4244940_grdc', 
'4244945_grdc', 
'4245100_grdc', 
'4245250_grdc', 
'4245500_grdc', 
'4245920_grdc', 
'4245950_grdc', 
'4247100_grdc', 
'4247101_grdc', 
'4281600_grdc', 
'4352100_grdc', 
'4353300_grdc', 
'4355080_grdc', 
'4355100_grdc', 
'4355200_grdc', 
'4355300_grdc', 
'4355310_grdc', 
'4355350_grdc', 
'4355400_grdc', 
'4358202_grdc', 
'4358210_grdc', 
'4358220_grdc', 
'4358300_grdc', 
'4358500_grdc', 
'4358800_grdc', 
'4362201_grdc', 
'4362600_grdc', 
'4462300_grdc', 
'4462500_grdc', 
'4462700_grdc', 
'4664800_grdc', 
'4772210_grdc', 
'4772250_grdc', 
'4773800_grdc', 
'4873450_grdc', 
'4876800_grdc', 
'4997050_grdc', 
'5222500_grdc', 
'5223100_grdc', 
'5224500_grdc', 
'5224600_grdc', 
'5225500_grdc', 
'5225600_grdc', 
'5226800_grdc', 
'5230200_grdc', 
'5230300_grdc', 
'5230500_grdc', 
'5231500_grdc', 
'5231550_grdc', 
'5231600_grdc', 
'5231700_grdc', 
'5654140_grdc', 
'5654190_grdc', 
'5654300_grdc', 
'5654340_grdc', 
'5654500_grdc', 
'5654550_grdc', 
'5654600_grdc', 
'5657500_grdc', 
'5660110_grdc', 
'5660500_grdc', 
'6111100_grdc', 
'6112090_grdc', 
'6113100_grdc', 
'6113110_grdc', 
'6114300_grdc', 
'6116100_grdc', 
'6119010_grdc', 
'6122100_grdc', 
'6122110_grdc', 
'6122300_grdc', 
'6123100_grdc', 
'6123300_grdc', 
'6123400_grdc', 
'6123710_grdc', 
'6125360_grdc', 
'6128100_grdc', 
'6128701_grdc', 
'6128702_grdc', 
'6136200_grdc', 
'6139284_grdc', 
'6139370_grdc', 
'6139390_grdc', 
'6139391_grdc', 
'6139400_grdc', 
'6139500_grdc', 
'6139501_grdc', 
'6139502_grdc', 
'6139682_grdc', 
'6139770_grdc', 
'6139790_grdc', 
'6139960_grdc', 
'6140250_grdc', 
'6140300_grdc', 
'6140400_grdc', 
'6140401_grdc', 
'6142110_grdc', 
'6142120_grdc', 
'6142150_grdc', 
'6142200_grdc', 
'6142551_grdc', 
'6142620_grdc', 
'6142660_grdc', 
'6142680_grdc', 
'6144200_grdc', 
'6144300_grdc', 
'6157100_grdc', 
'6158100_grdc', 
'6172050_grdc', 
'6172052_grdc', 
'6172200_grdc', 
'6172350_grdc', 
'6210410_grdc', 
'6211050_grdc', 
'6211100_grdc', 
'6211150_grdc', 
'6211500_grdc', 
'6211520_grdc', 
'6212400_grdc', 
'6212410_grdc', 
'6212430_grdc', 
'6212440_grdc', 
'6212450_grdc', 
'6212460_grdc', 
'6212470_grdc', 
'6212500_grdc', 
'6212505_grdc', 
'6212510_grdc', 
'6212515_grdc', 
'6212740_grdc', 
'6212750_grdc', 
'6212810_grdc', 
'6212820_grdc', 
'6212840_grdc', 
'6213500_grdc', 
'6213520_grdc', 
'6213530_grdc', 
'6213600_grdc', 
'6213650_grdc', 
'6213700_grdc', 
'6213750_grdc', 
'6213770_grdc', 
'6213780_grdc', 
'6213800_grdc', 
'6213850_grdc', 
'6213900_grdc', 
'6216500_grdc', 
'6216510_grdc', 
'6216610_grdc', 
'6216630_grdc', 
'6217100_grdc', 
'6217110_grdc', 
'6217120_grdc', 
'6217135_grdc', 
'6220201_grdc', 
'6220204_grdc', 
'6220210_grdc', 
'6221100_grdc', 
'6221101_grdc', 
'6221102_grdc', 
'6221630_grdc', 
'6226200_grdc', 
'6226300_grdc', 
'6226310_grdc', 
'6226400_grdc', 
'6226430_grdc', 
'6226550_grdc', 
'6226600_grdc', 
'6226650_grdc', 
'6226800_grdc', 
'6227510_grdc', 
'6228800_grdc', 
'6228810_grdc', 
'6228820_grdc', 
'6232900_grdc', 
'6232901_grdc', 
'6232910_grdc', 
'6232911_grdc', 
'6232913_grdc', 
'6232915_grdc', 
'6232930_grdc', 
'6233170_grdc', 
'6233201_grdc', 
'6233203_grdc', 
'6233221_grdc', 
'6233315_grdc', 
'6233401_grdc', 
'6233465_grdc', 
'6233501_grdc', 
'6233502_grdc', 
'6233510_grdc', 
'6233521_grdc', 
'6233523_grdc', 
'6233551_grdc', 
'6233650_grdc', 
'6233680_grdc', 
'6233710_grdc', 
'6233750_grdc', 
'6233754_grdc', 
'6233780_grdc', 
'6233800_grdc', 
'6233850_grdc', 
'6235530_grdc', 
'6235535_grdc', 
'6242100_grdc', 
'6242150_grdc', 
'6242180_grdc', 
'6242250_grdc', 
'6242300_grdc', 
'6242400_grdc', 
'6242401_grdc', 
'6242630_grdc', 
'6242700_grdc', 
'6242800_grdc', 
'6242820_grdc', 
'6242830_grdc', 
'6243030_grdc', 
'6243050_grdc', 
'6243245_grdc', 
'6243400_grdc', 
'6243450_grdc', 
'6243850_grdc', 
'6246400_grdc', 
'6246590_grdc', 
'6246600_grdc', 
'6246601_grdc', 
'6246610_grdc', 
'6246611_grdc', 
'6246612_grdc', 
'6258226_grdc', 
'6261100_grdc', 
'6261150_grdc', 
'6273302_grdc', 
'6273303_grdc', 
'6273614_grdc', 
'6274157_grdc', 
'6274353_grdc', 
'6274677_grdc', 
'6274691_grdc', 
'6279500_grdc', 
'6335020_grdc', 
'6335030_grdc', 
'6335050_grdc', 
'6335060_grdc', 
'6335070_grdc', 
'6335080_grdc', 
'6335100_grdc', 
'6335113_grdc', 
'6335115_grdc', 
'6335150_grdc', 
'6335170_grdc', 
'6335180_grdc', 
'6335200_grdc', 
'6335240_grdc', 
'6335301_grdc', 
'6335302_grdc', 
'6335303_grdc', 
'6335304_grdc', 
'6335400_grdc', 
'6335500_grdc', 
'6335530_grdc', 
'6335600_grdc', 
'6335602_grdc', 
'6336050_grdc', 
'6336500_grdc', 
'6336800_grdc', 
'6336900_grdc', 
'6337100_grdc', 
'6337200_grdc', 
'6337250_grdc', 
'6337400_grdc', 
'6337501_grdc', 
'6337507_grdc', 
'6337514_grdc', 
'6337515_grdc', 
'6337516_grdc', 
'6337517_grdc', 
'6337518_grdc', 
'6337519_grdc', 
'6338110_grdc', 
'6338130_grdc', 
'6338140_grdc', 
'6340110_grdc', 
'6340120_grdc', 
'6340130_grdc', 
'6340140_grdc', 
'6340150_grdc', 
'6340160_grdc', 
'6340170_grdc', 
'6340180_grdc', 
'6340190_grdc', 
'6340500_grdc', 
'6340510_grdc', 
'6340600_grdc', 
'6340610_grdc', 
'6340620_grdc', 
'6340625_grdc', 
'6342201_grdc', 
'6342500_grdc', 
'6342501_grdc', 
'6342510_grdc', 
'6342512_grdc', 
'6342513_grdc', 
'6342600_grdc', 
'6342610_grdc', 
'6342620_grdc', 
'6342800_grdc', 
'6342900_grdc', 
'6342910_grdc', 
'6342920_grdc', 
'6342925_grdc', 
'6343100_grdc', 
'6343500_grdc', 
'6343510_grdc', 
'6343900_grdc', 
'6348200_grdc', 
'6348201_grdc', 
'6348300_grdc', 
'6348350_grdc', 
'6348600_grdc', 
'6348610_grdc', 
'6348800_grdc', 
'6349600_grdc', 
'6357010_grdc', 
'6357500_grdc', 
'6372100_grdc', 
'6373010_grdc', 
'6373020_grdc', 
'6373040_grdc', 
'6373102_grdc', 
'6373219_grdc', 
'6373300_grdc', 
'6373304_grdc', 
'6373307_grdc', 
'6373400_grdc', 
'6373430_grdc', 
'6395100_grdc', 
'6401070_grdc', 
'6401080_grdc', 
'6401090_grdc', 
'6401111_grdc', 
'6401120_grdc', 
'6401130_grdc', 
'6401150_grdc', 
'6401200_grdc', 
'6401250_grdc', 
'6401440_grdc', 
'6401500_grdc', 
'6401610_grdc', 
'6401701_grdc', 
'6401702_grdc', 
'6401703_grdc', 
'6401800_grdc', 
'6421102_grdc', 
'6421501_grdc', 
'6421900_grdc', 
'6435060_grdc', 
'6438500_grdc', 
'6442450_grdc', 
'6442500_grdc', 
'6444100_grdc', 
'6444310_grdc', 
'6457010_grdc', 
'6457100_grdc', 
'6457200_grdc', 
'6457205_grdc', 
'6457660_grdc', 
'6457670_grdc', 
'6457680_grdc', 
'6457690_grdc', 
'6457700_grdc', 
'6457800_grdc', 
'6457810_grdc', 
'6457820_grdc', 
'6457840_grdc', 
'6457850_grdc', 
'6457870_grdc', 
'6457890_grdc', 
'6458010_grdc', 
'6458404_grdc', 
'6458406_grdc', 
'6458450_grdc', 
'6458460_grdc', 
'6458500_grdc', 
'6458550_grdc', 
'6458600_grdc', 
'6458810_grdc', 
'6458924_grdc', 
'6502100_grdc', 
'6502101_grdc', 
'6502151_grdc', 
'6503121_grdc', 
'6503150_grdc', 
'6503151_grdc', 
'6503200_grdc', 
'6503201_grdc', 
'6503280_grdc', 
'6503291_grdc', 
'6503300_grdc', 
'6503301_grdc', 
'6503350_grdc', 
'6503351_grdc', 
'6503850_grdc', 
'6503851_grdc', 
'6503852_grdc', 
'6542200_grdc', 
'6542600_grdc', 
'6544100_grdc', 
'6545050_grdc', 
'6545100_grdc', 
'6545101_grdc', 
'6545102_grdc', 
'6545190_grdc', 
'6545200_grdc', 
'6545500_grdc', 
'6545501_grdc', 
'6546610_grdc', 
'6546801_grdc', 
'6546802_grdc', 
'6547500_grdc', 
'6559100_grdc', 
'6559101_grdc', 
'6559180_grdc', 
'6573102_grdc', 
'6573434_grdc', 
'6574011_grdc', 
'6574150_grdc', 
'6574152_grdc', 
'6574156_grdc', 
'6574351_grdc', 
'6574352_grdc', 
'6574362_grdc', 
'6590700_grdc', 
'6603120_grdc', 
'6604201_grdc', 
'6604310_grdc', 
'6604360_grdc', 
'6604450_grdc', 
'6605300_grdc', 
'6605560_grdc', 
'6605570_grdc', 
'6605590_grdc', 
'6605615_grdc', 
'6605690_grdc', 
'6605695_grdc', 
'6605750_grdc', 
'6605780_grdc', 
'6605800_grdc', 
'6605815_grdc', 
'6605820_grdc', 
'6605830_grdc', 
'6605950_grdc', 
'6606310_grdc', 
'6606400_grdc', 
'6606401_grdc', 
'6606600_grdc', 
'6606650_grdc', 
'6606655_grdc', 
'6606701_grdc', 
'6608210_grdc', 
'6608501_grdc', 
'6609500_grdc', 
'6644200_grdc', 
'6644250_grdc', 
'6658100_grdc', 
'6660300_grdc', 
'6660350_grdc', 
'6660480_grdc', 
'6681300_grdc', 
'6687900_grdc', 
'6688150_grdc', 
'6688650_grdc', 
'6690100_grdc', 
'6695200_grdc', 
'6695250_grdc', 
'6695400_grdc', 
'6729142_grdc', 
'6729260_grdc', 
'6729317_grdc', 
'6729371_grdc', 
'6729401_grdc', 
'6729402_grdc', 
'6729450_grdc', 
'6729455_grdc', 
'6729530_grdc', 
'6729595_grdc', 
'6730100_grdc', 
'6730330_grdc', 
'6730500_grdc', 
'6730501_grdc', 
'6731020_grdc', 
'6731137_grdc', 
'6731501_grdc', 
'6731515_grdc', 
'6731555_grdc', 
'6731601_grdc', 
'6731680_grdc', 
'6731693_grdc', 
'6731907_grdc', 
'6731910_grdc', 
'6731920_grdc', 
'6733570_grdc', 
'6742200_grdc', 
'6742201_grdc', 
'6742400_grdc', 
'6742450_grdc', 
'6742451_grdc', 
'6742452_grdc', 
'6742500_grdc', 
'6742552_grdc', 
'6742600_grdc', 
'6742700_grdc', 
'6742701_grdc', 
'6742900_grdc', 
'6742912_grdc', 
'6744200_grdc', 
'6744201_grdc', 
'6744500_grdc', 
'6744600_grdc', 
'6830100_grdc', 
'6830102_grdc', 
'6830104_grdc', 
'6830510_grdc', 
'6830511_grdc', 
'6830512_grdc', 
'6832750_grdc', 
'6832752_grdc', 
'6832754_grdc', 
'6832755_grdc', 
'6832907_grdc', 
'6832917_grdc', 
'6842200_grdc', 
'6842400_grdc', 
'6842700_grdc', 
'6842800_grdc', 
'6842900_grdc', 
'6854101_grdc', 
'6854105_grdc', 
'6854203_grdc', 
'6854320_grdc', 
'6854400_grdc', 
'6854500_grdc', 
'6854590_grdc', 
'6854591_grdc', 
'6854592_grdc', 
'6854600_grdc', 
'6854602_grdc', 
'6854620_grdc', 
'6854700_grdc', 
'6854701_grdc', 
'6854702_grdc', 
'6854703_grdc', 
'6854704_grdc', 
'6854705_grdc', 
'6854706_grdc', 
'6854707_grdc', 
'6854708_grdc', 
'6854709_grdc', 
'6854710_grdc', 
'6854712_grdc', 
'6854713_grdc', 
'6854718_grdc', 
'6854720_grdc', 
'6854800_grdc', 
'6854802_grdc', 
'6854900_grdc', 
'6854902_grdc', 
'6855400_grdc', 
'6855401_grdc', 
'6855409_grdc', 
'6855480_grdc', 
'6864800_grdc', 
'6865600_grdc', 
'6871100_grdc', 
'6887400_grdc', 
'6890150_grdc', 
'6930170_grdc', 
'6935020_grdc', 
'6935050_grdc', 
'6935051_grdc', 
'6935052_grdc', 
'6935053_grdc', 
'6935054_grdc', 
'6935055_grdc', 
'6935145_grdc', 
'6935146_grdc', 
'6935300_grdc', 
'6935301_grdc', 
'6935302_grdc', 
'6935310_grdc', 
'6935313_grdc', 
'6935400_grdc', 
'6935401_grdc', 
'6935500_grdc', 
'6939050_grdc', 
'6939200_grdc', 
'6939500_grdc', 
'6943100_grdc', 
'6948100_grdc', 
'6948120_grdc', 
'6955430_grdc', 
'6970100_grdc', 
'6970110_grdc', 
'6970115_grdc', 
'6970125_grdc', 
'6970135_grdc', 
'6970136_grdc', 
'6970138_grdc', 
'6970141_grdc', 
'6970145_grdc', 
'6970146_grdc', 
'6970166_grdc', 
'6970175_grdc', 
'6970180_grdc', 
'6970250_grdc', 
'6970252_grdc', 
'6970270_grdc', 
'6970272_grdc', 
'6970273_grdc', 
'6970275_grdc', 
'6970325_grdc', 
'6970400_grdc', 
'6970401_grdc', 
'6970402_grdc', 
'6970410_grdc', 
'6970420_grdc', 
'6970450_grdc', 
'6970458_grdc', 
'6970460_grdc', 
'6970466_grdc', 
'6970470_grdc', 
'6970480_grdc', 
'6970502_grdc', 
'6970505_grdc', 
'6970521_grdc', 
'6970561_grdc', 
'6970583_grdc', 
'6970630_grdc', 
'6970680_grdc', 
'6970682_grdc', 
'6970684_grdc', 
'6970700_grdc', 
'6970702_grdc', 
'6970703_grdc', 
'6970704_grdc', 
'6970705_grdc', 
'6970720_grdc', 
'6970722_grdc', 
'6970735_grdc', 
'6970745_grdc', 
'6970751_grdc', 
'6970775_grdc', 
'6970802_grdc', 
'6970803_grdc', 
'6970807_grdc', 
'6970808_grdc', 
'6970809_grdc', 
'6970810_grdc', 
'6970813_grdc', 
'6970825_grdc', 
'6970831_grdc', 
'6970832_grdc', 
'6970850_grdc', 
'6970856_grdc', 
'6970861_grdc', 
'6970862_grdc', 
'6970863_grdc', 
'6970870_grdc', 
'6970871_grdc', 
'6970874_grdc', 
'6970875_grdc', 
'6970876_grdc', 
'6970880_grdc', 
'6970881_grdc', 
'6970890_grdc', 
'6970893_grdc', 
'6970895_grdc', 
'6970900_grdc', 
'6970902_grdc', 
'6970910_grdc', 
'6971100_grdc', 
'6971130_grdc', 
'6971137_grdc', 
'6971140_grdc', 
'6971150_grdc', 
'6971151_grdc', 
'6971200_grdc', 
'6971310_grdc', 
'6971400_grdc', 
'6971401_grdc', 
'6971405_grdc', 
'6971435_grdc', 
'6971440_grdc', 
'6971445_grdc', 
'6971450_grdc', 
'6971452_grdc', 
'6971500_grdc', 
'6971600_grdc', 
'6971710_grdc', 
'6972300_grdc', 
'6975080_grdc', 
'6976700_grdc', 
'6978250_grdc', 
'6978251_grdc', 
'6983350_grdc', 
'6983750_grdc', 
'6983800_grdc', 
'6984500_grdc', 
'6984800_grdc']

#p = ['1134200_grdc','1134650_grdc']
def exportation (gauge, buffer):
	id = gauge
	loc = grdc.filter(ee.Filter.eq('Sttn_Nm', id))
	#loc = grdc.filter(ee.Filter.eq('Sttn_Nm',id))
	filt_gauge = loc
	xsections = sword.filterBounds(loc.geometry().buffer(buffer))
	record = records.filter(ee.Filter.eq('Sttn_Nm', id)).filter(ee.Filter.notNull(['value'])).filter(ee.Filter.gt('value', 0))

	#print('size', xsections.size())
	#Map.addLayer(xsections.limit(10))

	def Mndwi(image):
		return(image.normalizedDifference(['Green', 'Swir1']).rename('mndwi'))

	def Mbsrv(image):
		return(image.select(['Green']).add(image.select(['Red'])).rename('mbsrv'))

	def Mbsrn(image):
		return(image.select(['Nir']).add(image.select(['Swir1'])).rename('mbsrn'))

	def Ndvi(image):
		return(image.normalizedDifference(['Nir', 'Red']).rename('ndvi'))

	def Awesh(image):
		return(image.expression('Blue + 2.5 * Green + (-1.5) * mbsrn + (-0.25) * Swir2', {
		'Blue': image.select(['Blue']),
		'Green': image.select(['Green']),
		'mbsrn': Mbsrn(image).select(['mbsrn']),
		'Swir2': image.select(['Swir2'])}))

	def Dswe(i):
		mndwi = Mndwi(i)
		mbsrv = Mbsrv(i)
		mbsrn = Mbsrn(i)
		awesh = Awesh(i)
		swir1 = i.select(['Swir1'])
		nir = i.select(['Nir'])
		ndvi = Ndvi(i)
		blue = i.select(['Blue'])
		swir2 = i.select(['Swir2'])

		t1 = mndwi.gt(0.124)
		t2 = mbsrv.gt(mbsrn)
		t3 = awesh.gt(0)
		t4 = (mndwi.gt(-0.44)
		.And(swir1.lt(900))
		.And(nir.lt(1500))
		.And(ndvi.lt(0.7)))
		t5 = (mndwi.gt(-0.5)
		.And(blue.lt(1000))
		.And(swir1.lt(3000))
		.And(swir2.lt(1000))
		.And(nir.lt(2500)))

		t = t1.add(t2.multiply(10)).add(t3.multiply(100)).add(t4.multiply(1000)).add(t5.multiply(10000))

		noWater = (t.eq(0)
		.Or(t.eq(1))
		.Or(t.eq(10))
		.Or(t.eq(100))
		.Or(t.eq(1000)))
		hWater = (t.eq(1111)
		.Or(t.eq(10111))
		.Or(t.eq(11011))
		.Or(t.eq(11101))
		.Or(t.eq(11110))
		.Or(t.eq(11111)))
		mWater = (t.eq(111)
		.Or(t.eq(1011))
		.Or(t.eq(1101))
		.Or(t.eq(1110))
		.Or(t.eq(10011))
		.Or(t.eq(10101))
		.Or(t.eq(10110))
		.Or(t.eq(11001))
		.Or(t.eq(11010))
		.Or(t.eq(11100)))
		pWetland = t.eq(11000)
		lWater = (t.eq(11)
		.Or(t.eq(101))
		.Or(t.eq(110))
		.Or(t.eq(1001))
		.Or(t.eq(1010))
		.Or(t.eq(1100))
		.Or(t.eq(10000))
		.Or(t.eq(10001))
		.Or(t.eq(10010))
		.Or(t.eq(10100)))

		iDswe = (noWater.multiply(0)
		.add(hWater.multiply(1))
		.add(mWater.multiply(2))
		.add(pWetland.multiply(3))
		.add(lWater.multiply(4)))

		return(iDswe.rename(['dswe']))

	def ClassifyWaterJones2019(img):
		dswe = Dswe(img)
		waterMask = dswe.eq(1).Or(dswe.eq(2)).rename(['waterMask'])
		out = waterMask.copyProperties(img)
		return(out.set({'system:time_start':img.get('system:time_start')}))

	def Ndvi(image):
		# // calculate ndvi
		ndvi = image.normalizedDifference(['Nir', 'Red']).rename('ndvi')
		return ndvi

	def Evi(image):
		# calculate the enhanced vegetation index
		evi = image.expression('2.5 * (Nir - Red) / (1 + Nir + 6 * Red - 7.5 * Blue)', {
		'Nir': image.select(['Nir']),
		'Red': image.select(['Red']),
		'Blue': image.select(['Blue'])
		})
		return evi.rename(['evi'])

	def Mndwi(image):
		# calculate mndwi
		mndwi = image.normalizedDifference(['Green', 'Swir1']).rename('mndwi')
		return mndwi

	def ClassifyWaterZou2018(image):
		mndwi = Mndwi(image)
		ndvi = Ndvi(image)
		evi = Evi(image)
		water = (mndwi.gt(ndvi).Or(mndwi.gt(evi))).And(evi.lt(0.1)).rename(['waterMask'])
		out = water.copyProperties(image)
		return(out.set({'system:time_start':image.get('system:time_start')}))




	def ExtractChannel(image):
		# // extract the channel water bodies from the water mask, based on connectivity to the reference centerline.
		connectedToCl = (image.Not().cumulativeCost(
			source = ee.Image().toByte().paint(grwl_cline, 1).And(image), #// only use the centerline that overlaps with the water mask
			maxDistance = 4000,
			geodeticDistance = False).eq(0))

		channel = image.updateMask(connectedToCl).unmask(0).updateMask(image.gte(0)).rename(['channelMask'])
		return(channel)



	def yrFun(f):
	  a = f.get('variable')
	  return(f.set({'Date':a}))

	record = record.map(yrFun)

	# Match common names to the sensor-specific bands:
	LT5_BANDS = ['B1',   'B2',    'B3',  'B4',  'B5',    'B7',    'B6', 'pixel_qa']
	LE7_BANDS = ['B1',   'B2',    'B3',  'B4',  'B5',    'B7',    'B6', 'pixel_qa']
	LC8_BANDS = ['B2',   'B3',    'B4',  'B5',  'B6',    'B7',    'B10', 'pixel_qa']
	STD_NAMES = ['Blue', 'Green', 'Red', 'Nir', 'Swir1', 'Swir2', 'Temp', 'BQA']

	# load Landsat 5,7,8 collections:
	# TODO(GHA): combine 5, 7, and 8 collections:
	LT5 = ee.ImageCollection('LANDSAT/LT5_L1T_SR') \
		.select(LT5_BANDS, STD_NAMES)
	LT5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR') \
		.select(LT5_BANDS, STD_NAMES)
	LE7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR') \
	.select(LE7_BANDS, STD_NAMES).filterDate('1999-01-01', '2003-05-30')
	LC8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR') \
	   .select(LC8_BANDS, STD_NAMES)
	bn = ['B2', 'B3', 'B4', 'B8','B11','B12','QA10','QA60']
	collection = LT5.merge(LE7).merge(LC8)
	collection = collection.filterBounds(xsections)
	collection = collection.filterDate('1984-01-01','2021-12-31')

	#
	sent = ee.ImageCollection("COPERNICUS/S2_SR").filterBounds(xsections)
	sent = sent.select(bn, STD_NAMES)

	def func_yoc(f):
	  a = f.get('system:time_start')
	  b = ee.Date(a).format("yyyy-MM-dd")
	  return(f.set({'system:id': b, 'ID':b, 'area': 100}))

	sent = sent.map(func_yoc)





	#


	def func_zwp(f):
	  a = f.get('system:time_start')
	  b = ee.Date(a).format("yyyy-MM-dd")
	  return(f.set({'system:id': b, 'ID':b, 'area': 900}))

	collection = collection.map(func_zwp)





	collection = collection#.merge(sent)
	#record = record.filter(ee.Filter.gte('value', 0)).filter()
	def img(f):
	  a = f.get('Date')
	  b = f.get('value')
	  c = ee.Image.constant(b)
	  return(ee.Image(c).set({'Date': a, 'Q':b,'system:id':ee.String(a), 'ID':ee.String(a)}))

	imgColl = record.map(img)
	toyFilter = ee.Filter.equals(
	  leftField= 'ID',
	  rightField= 'ID'
	)
	# Define the join.
	innerJoin = ee.Join.inner('primary', 'secondary')
	# Apply the join.
	toyJoin = innerJoin.apply(collection,imgColl, toyFilter)

	def func_isq(f):
	  a = f.get('secondary')
	  a = ee.Image(a).get('Q')
	  b = f.get('primary')
	  c = ee.Image(b).set({'Q':a})
	  return(c)

	combined = toyJoin.map(func_isq)

	def func_elp(f):
	  a = ee.Image(f)
	  b = a.clip(xsections.geometry())
	  return(b)

	#filtered = combined.map(func_elp)


	#/Maybe keep??
	filtered = combined
	sent = filtered.filter(ee.Filter.eq('area', 100))
	#print(sent.first())
	filtered = filtered.filter(ee.Filter.eq('area', 900))



	def Unpack(bitBand, startingBit, bitWidth):
		# unpacking bit bands
		# see: https://groups.google.com/forum/#!starred/google-earth-engine-developers/iSV4LwzIW7A
		return (ee.Image(bitBand)
				.rightShift(startingBit)
				.bitwiseAnd(ee.Number(2).pow(ee.Number(bitWidth)).subtract(ee.Number(1)).int()))
	def UnpackAllSR(bitBand):
		# apply Unpack function for multiple pixel qualities
		bitInfoSR = {
		'Cloud': [5, 1],
		'CloudShadow': [3, 1],
		'SnowIce': [4, 1],
		'Water': [2, 1]
		}
		unpackedImage = ee.Image.cat([Unpack(bitBand, bitInfoSR[key][0], bitInfoSR[key][1]).rename([key]) for key in bitInfoSR])
		return unpackedImage
	def AddFmaskSR(image):
		# // add fmask as a separate band to the input image
		temp = UnpackAllSR(image.select(['BQA']))

		fmask = (temp.select(['Water']).rename(['fmask'])
		.where(temp.select(['SnowIce']), ee.Image(3))
		.where(temp.select(['CloudShadow']), ee.Image(2))
		.where(temp.select(['Cloud']), ee.Image(4))
		.mask(temp.select(['Cloud']).gte(0)))

		return image.addBands(fmask)

	flagged = ee.ImageCollection(filtered).map(AddFmaskSR)


	def sentinelCloud(f):
	  temp = f.select('BQA').rename('fmask')
	  temp = temp.eq(3).Or(temp.eq(7)).Or(temp.eq(8)).Or(temp.eq(9)).Or(temp.eq(10))
	  fmask = temp.where(temp.eq(7), ee.Image(2)).where(temp.eq(11), ee.Image(3)).where(temp.eq(8).Or(temp.eq(9).Or(temp.eq(10))), ee.Image(4))
	  fmask = fmask.where(fmask.eq(1), ee.Image(2))
	  return(f.addBands(fmask))
	sent = ee.ImageCollection(sent).map(sentinelCloud)
	flagged = flagged.merge(sent)

	def running(xsections):
		xsections = ee.FeatureCollection(xsections)

		def cloudFunction (f):
		  cld = f.select('fmask').gt(2)
		  min = cld#.mask(cld)
		  min = (min.reduceRegion(geometry= xsections,reducer= ee.Reducer.mean()))
		  #add = f.set({'cloud': ee.Number(min.get('fmask')).multiply(100)})
		  #return(ee.Algorithms.If(min.get('fmask'),add, f.set({'cloud': ee.Number(100)})))
		  return(f.set({'cloud':ee.Number(min.get('fmask'))}))


		filtered= ee.ImageCollection(flagged).filterBounds(xsections).map(cloudFunction)
		filtered = filtered.filter(ee.Filter.notNull(['cloud']))#.filter(ee.Filter.lte('cloud', 10))
		filtered = filtered.filter(ee.Filter.lte('cloud', .1))
		waterMask = filtered.map(ClassifyWaterZou2018)#(x.ClassifyWaterJones2019)

		filt = xsections
		#Determine connectivity of water pixels to grwl centerline and filter out any water pixels more than 4km away from centerline.
		def GetCenterline(clDataset, bound):
			# // filter the GRWL centerline based on area of interest
			cl = clDataset.filterBounds(bound)
			return(cl)
		#riverFun.GetCenterline(grwl_cline, xsections)
		riverMask = waterMask.map(ExtractChannel)

		def line2pt (f):
				f = f.set({'lineGeometry': f.geometry()})
				l = f.geometry().coordinates()
				g = ee.Geometry.MultiPoint(l, 'EPSG:4326')
				return(f.setGeometry(g))

		def func_lrw(x):
		  flags = x.reduceRegions(
		  collection = xsections.map(line2pt),
		  reducer = ee.Reducer.max().combine(ee.Reducer.count(),"", True))
		  flags = flags.first()
		  flagsMax = flags.get('max')
		  pts = flags.get('count')
		  return(x.set({'flags':flagsMax, 'endPoints':pts}))

		flagging = riverMask.map(func_lrw)
		flaggingFiltered = flagging.filter(ee.Filter.eq('endPoints', 2)).filter(ee.Filter.eq('flags',0))

		def func_pvd(x):
		  wd = x.eq(1).reduceRegion(geometry= xsections, 
		  reducer= ee.Reducer.mean())
		  length = xsections.geometry().length()
		  wd = ee.Number(wd.get('channelMask')).multiply(ee.Number(length))
		  return(x.set({'width':wd}))

		widths = flaggingFiltered.map(func_pvd)
		widths = widths.filter(ee.Filter.gt('width', 0)).filter(ee.Filter.notNull(['width', 'Q'])).filter(ee.Filter.gte('Q',0))#.filter(ee.Filter.eq('endPoints', 2)).filter(ee.Filter.eq('flags',0))

		def func_bjh(f):
		  a = f.get('Q')
		  b = ee.Number(a).round()
		  return(f.set({'Q': b}))

		final_filtered = ee.FeatureCollection(widths).map(func_bjh)
		random = ee.FeatureCollection(final_filtered).randomColumn('random',7,'uniform')
		training = ee.FeatureCollection(random).filter(ee.Filter.gte('random', .3))
		testing = ee.FeatureCollection(random).filter(ee.Filter.lt('random', .3))
		# lr = ee.FeatureCollection(training).reduceColumns(ee.Reducer.linearFit(), ['width','Q'])
		# b = lr.get('offset')#.errorMatrix('Q', 'classification').accuracy()
		# slope = lr.get('scale')

		# def func_tnf(x):
		  # wd = ee.Number(x.get('width')).multiply(ee.Number(slope))
		  # wd = wd.add(b)
		  # return(x.set({'classification':ee.Number(wd)}))

		# r = ee.FeatureCollection(testing).map(func_tnf)
		# r = r.filter(ee.Filter.gte('classification',0))#.filter(ee.Filter.notNull['classification'])
		#classifier = ee.Classifier.smileRandomForest(training.size()).train(training,'Q',['width'])
		classifier = ee.Algorithms.If(training.size().gte(2).And(training.distinct('Q').size().gte(2)),ee.Classifier.smileRandomForest(training.size()).train(training,'Q',['width']), None) 
		#r = testing.classify(classifier)
		def fill (f):
		  a = f.set({'classifier':-9999})
		  return(a)
		r = ee.Algorithms.If(training.size().gte(2).And(training.distinct('Q').size().gte(2)), testing.classify(classifier),ee.FeatureCollection(testing).map(fill))

		r = ee.FeatureCollection(r)
		r = r.filter(ee.Filter.notNull(['Q','classification','width'])).filter(ee.Filter.gte('classification',0))
		
		actual = testing.aggregate_array('Q')
		mean = actual.reduce(ee.Reducer.mean())

		# def func_rdt(f):
		  # model = f.get('classification')
		  # actual = f.get('Q')
		  # error = ee.Number(model).subtract(ee.Number(actual))
		  # rel = ee.Number(error).divide(ee.Number(mean))
		  # sqr = ee.Number(rel).pow(2)
		  # #return(f.set({'sqr': sqr}))
		  # return(ee.Algorithms.If(error,f.set({'sqr': sqr}), f.set({'sqr': None})))

		# sqr = r.map(func_rdt)
		# meanSqr = sqr.aggregate_array('sqr').reduce(ee.Reducer.mean())
		# rrmse = ee.Number(meanSqr).sqrt()
		# rrmse = ee.Number(rrmse).multiply(100)
		# out = xsections.set({'rrmse':rrmse})

		def func_wnu(f):
		  model = f.get('classification')
		  actual = f.get('Q')
		  error = ee.Number(model).subtract(ee.Number(actual))
		  error = ee.Number(error).pow(2)
		  #return(f.set({'error': error}))
		  return(ee.Algorithms.If(error,f.set({'error': error}), f.set({'error': None})))

		nse1 = r.map(func_wnu)

		def func_pjl(f):
		  model = f.get('classification')
		  actual = f.get('Q')
		  rel = ee.Number(actual).subtract(ee.Number(mean))
		  rel = ee.Number(rel).pow(2)
		  return(f.set({'rel': rel}))

		nse2 = r.map(func_pjl)
		meanNSE1 = nse1.aggregate_array('error').reduce(ee.Reducer.mean())
		meanNSE2 = nse2.aggregate_array('rel').reduce(ee.Reducer.mean())
		#nse = ee.Number(meanNSE1).divide(ee.Number(meanNSE2))
		#nse = ee.Algorithms.If(meanNSE1, ee.Number(meanNSE1).divide(ee.Number(meanNSE2)), 9999)

		#nse = ee.Number(1).subtract(nse)
		nse = ee.Algorithms.If(meanNSE1, ee.Number(1).subtract(ee.Number(meanNSE1).divide(ee.Number(meanNSE2))), -9999)
		nse = ee.Algorithms.If(meanNSE2, nse, -9999)
		output=xsections.first().set({'Sttn_Nm':id,'nse':nse, 'buffer':ee.Number(buffer), 'testing':testing.size(), 'training':training.size()})#, 'slope':slope, 'yInt':b})
		return(ee.Algorithms.If(training.size().gte(2),output, xsections.first().set({'Sttn_Nm':id,'nse':-9999,'buffer':ee.Number(buffer), 'testing':testing.size(), 'training':training.size()})))
	run = xsections.map(running)
	out = run.sort('nse', False)
	out = out.limit(10)
	#out = ee.Algorithms.If(ee.Number(out.first().get('nse')).lt(0), exec(open('E:/research/RatingCurveAnalysis/src/outerBuffer.py').read()),out)
	return(out)


# together = ee.List(p).slice(0,3,1).map(exportation,2000)
# task = (ee.batch.Export.table.toAsset(together, 'all', 'users/rriggs/testRun'))
# task.start()

# def all(f):
  # out = exportation(f,2000)
  # return(ee.Algorithms.If(ee.Number(out.first().get('nse')).lt(0).And(out.size().eq(0)), exportation(f,10000), out))

# gauges = ee.FeatureCollection('users/rriggs/GSIM_plus_India')
# gaugesFilt = gauges.filter(ee.Filter.stringContains('Sttn_Nm','grdc'))

# results = gaugesFilt.limit(10).map(all)
# task = (ee.batch.Export.table.toAsset(ee.FeatureCollection(results.flatten()), 'testingAll', 'users/rriggs/testRun'))
# task.start()




for i in range(len(p)):
	out = exportation(p[i],2000)
	out = ee.Algorithms.If(ee.Number(out.first().get('nse')).lt(0), exportation(p[i],5000), out)

	
	
	
	
	task = (ee.batch.Export.table.toDrive(
	collection = out,
	description = 'widths_' + '_' + str(p[i]),
	folder = 'GRDC_RandomForestRC_performance',
	fileNamePrefix = 'Gauge_' + '_' + str(p[i]),
	fileFormat = 'csv'
	))

	task.start()
	#print(output.first())
	print('task', p[i], 'has started')
	maximum_no_of_tasks(10,30)



